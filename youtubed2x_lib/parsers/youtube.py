import re
import datetime
import urllib2
from youtubed2x_lib.parsers import Parser_Helper


class YouTube_Parser (Parser_Helper):
    """Parser for YouTube pages. Updated 03/26/2011"""
    # URLs and RegExp statements from youtube-dl (some slightly modified)
    const_video_url_re = re.compile (
        r"""^(?:http://)?(?:\w{3}\.)?youtube\.com/(?:v/|(?:watch(?:\.php)?)"""
        r"""?\?(?:.+&)?v=)?([0-9A-Za-z_-]+)(?(1)[&/].*)?$"""
    )
    video_url_str = "http://www.youtube.com/watch?v={0}"
    video_embed_info_url = (
        "http://www.youtube.com/get_video_info?&video_id={0}&el=embedded"
    )

    video_title_re = re.compile (
        r"""<link rel="alternate" type="application/json\+oembed" """
        r"""href="(?:.*)" title="([^<]*)"(?:[ ]+)?/>"""
    )
    video_url_params_re = re.compile (r""""fmt_stream_map": "(?:.*,)?35\|([^|]+)""")
    video_url_params_re_second = re.compile (
            r""""fmt_stream_map": "(?:.*,)?34\|([^|]+)""")

    login_required_re = re.compile (
        r"""^http://www.youtube.com/verify_age\?(?:&)?next_url=/watch""")
    video_embed_video_re = re.compile (
        r"""status=ok&.*author=(?:[^&]+)&watermark=.*&token=([^&]+)&"""
        r"""thumbnail_url"""
    )
    video_embed_title_re = re.compile (r"&title=(\S+)&ftoken=")

    parser_type = "YouTube"
    domain_str = "http://www.youtube.com/"
    host_str = "youtube.com"
    version = datetime.date (2011, 3, 26)

    def __init__ (self, video_id):
        super (self.__class__, self).__init__ (video_id)
        self.has_high_version = False
        self.requires_login = False
        self.real_url = ""

    def _parsePlayerCommands (self):
        """Get the commands needed to get the video player"""
        # Fine for now but maybe allow for more flexible format
        # options later
        match = self.video_url_params_re.search (self.page_dump)
        match = match if match else self.video_url_params_re_second.search (
            self.page_dump)

        if not match:
            raise self.InvalidCommands (
                "Could not find flash player commands")
        else:
            commands = match.groups ()

        return commands

    def _parseRealURL (self, commands):
        """Get the real url for the video"""
        token = commands[0]
        self.real_url = urllib2.unquote (token)
        self.real_url = self.real_url.decode ("unicode-escape")
        self.real_url = self.real_url.replace ("\\", "")
        return self.real_url

    @staticmethod
    def getImageData ():
        image_data = "\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\x00\x01\x00\xff\xfd\xfe\xfb\xff\x00\x01\x00\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xda\xd4\xd1\xff\x00\x01\x00\xff\xa0\xa2\x9f\xff\x00\x01\x00\xff\xda\xd4\xd1\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xffSUR\xff\x00\x01\x00\xffSUR\xff\xfd\xfe\xfb\xff!# \xff\x00\x01\x00\xff!# \xff\xfd\xfe\xfb\xff\x00\x01\x00\xff\xda\xd4\xd1\xff\x10\x12\x0f\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\x00\x01\x00\xff\xda\xd4\xd1\xff\xfd\xfe\xfb\xff!# \xff\xfd\xfe\xfb\xff\x10\x12\x0f\xff\xa0\xa2\x9f\xff\x00\x01\x00\xff\xda\xd4\xd1\xff\x00\x01\x00\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\x00\x01\x00\xff\xda\xd4\xd1\xff\xfd\xfe\xfb\xff!# \xff\xda\xd4\xd1\xff!# \xff\xda\xd4\xd1\xff\x00\x01\x00\xff\xa0\xa2\x9f\xff\x00\x01\x00\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\x00\x01\x00\xff\xda\xd4\xd1\xff\xfd\xfe\xfb\xff!# \xff\x00\x01\x00\xff!# \xff\xfd\xfe\xfb\xff!# \xff\x00\x01\x00\xff\x00\x01\x00\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xff\xad\xad\xff\xff-0\xff\xff\n\x0f\xff\xff-0\xff\xff-0\xff\xff-0\xff\xff-0\xff\xff\n\x0f\xff\xff-0\xff\xffPO\xff\xff||\xff\xff\xd0\xd0\xff\xff\xd0\xd0\xff\xff\xad\xad\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xff\n\x0f\xff\xff\xd0\xd0\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\n\x0f\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\n\x0f\xff\xff\n\x0f\xff\xff-0\xff\xff\xad\xad\xff\xff||\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xffPO\xff\xffPO\xff\xffPO\xff\xff-0\xff\xff\xe2\xe0\xff\xff\xad\xad\xff\xff-0\xff\xff\n\x0f\xff\xff\xad\xad\xff\xff-0\xff\xff-0\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xff\n\x0f\xff\xff\xe2\xe0\xff\xff\xad\xad\xff\xff\xad\xad\xff\xff\xad\xad\xff\xfd\xfe\xfb\xff\xff\xad\xad\xff\xff\xad\xad\xff\xff\xd0\xd0\xff\xff\xe2\xe0\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\xd0\xd0\xff\xff||\xff\xff\xad\xad\xff\xff\xad\xad\xff\xffde\xff\xff\xad\xad\xff\xff\xad\xad\xff\xff\xe2\xe0\xff\xff\xe2\xe0\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\xd0\xd0\xff\xffde\xff\xff\xad\xad\xff\xff\xad\xad\xff\xffde\xff\xff\xad\xad\xff\xff\xd0\xd0\xff\xffPO\xff\xff||\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xff-0\xff\xff\xd0\xd0\xff\xfd\xfe\xfb\xff\xff\xad\xad\xff\xff\xad\xad\xff\xfd\xfe\xfb\xff\xff\xad\xad\xff\xff||\xff\xfd\xfe\xfb\xff\xff\xe2\xe0\xff\xff\n\x0f\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xffde\xff\xff-0\xff\xffPO\xff\xff-0\xff\xff-0\xff\xffPO\xff\xff-0\xff\xff-0\xff\xffPO\xff\xff-0\xff\xff\n\x0f\xff\xffde\xff\xff-0\xff\xffPO\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff\xff||\xff\xffde\xff\xffde\xff\xffde\xff\xffde\xff\xffPO\xff\xffde\xff\xffPO\xff\xffde\xff\xff||\xff\xffde\xff\xff||\xff\xfd\xfe\xfb\xff\xfd\xfe\xfb\xff"

        return image_data

